[{"content":"","date":"28 February 2024","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"28 February 2024","permalink":"/","section":"Emreceng","summary":"","title":"Emreceng"},{"content":"","date":"28 February 2024","permalink":"/pythondersleri/ilkders/","section":"Pythondersleris","summary":"","title":"Ilkders"},{"content":"","date":"28 February 2024","permalink":"/pythondersleri/","section":"Pythondersleris","summary":"","title":"Pythondersleris"},{"content":"","date":"28 February 2024","permalink":"/categories/temel-seviye-python/","section":"Categories","summary":"","title":"Temel-Seviye-Python"},{"content":"","date":"28 February 2024","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"28 February 2024","permalink":"/categories/programlama/","section":"Categories","summary":"","title":"Programlama"},{"content":"","date":"28 February 2024","permalink":"/programlama/programlamakategorideneme/","section":"Programlamas","summary":"","title":"Programlamakategorideneme"},{"content":"","date":"28 February 2024","permalink":"/programlama/","section":"Programlamas","summary":"","title":"Programlamas"},{"content":"","date":"28 February 2024","permalink":"/categories/python/","section":"Categories","summary":"","title":"Python"},{"content":" Temel Seviye Python x ders Python\u0026#39;un temellerini öğrenin Başlangıç ve Temeller: Bu bölümde, Python programlama diline giriş yaparak başlıyoruz. Programlamaya yeni başlayanlar için temel kavramları, veri tiplerini ve değişkenleri ele alıyoruz. Ayrıca, basit matematik işlemleri ve Python'un temel yapı taşları olan ifadeleri öğreneceğiz. Fonksiyonlar ve Modüller: Temel seviyenin ikinci kısmında fonksiyonların nasıl tanımlandığını ve kullanıldığını öğreneceğiz. Yeniden kullanılabilir kod parçaları oluşturmanın önemi üzerinde duracağız ve Python'da yerleşik modüllerin nasıl etkin bir şekilde kullanılacağını keşfedeceğiz. Derslere git Orta Seviye Python y ders Python becerilerinizi geliştirin Nesne Yönelimli Programlama: Orta seviyede Python'un nesne yönelimli programlama (OOP) yönlerini keşfedeceğiz. Sınıflar, nesneler, miras ve polimorfizmin temellerini öğrenerek, kodlarımızı daha modüler ve yeniden kullanılabilir hale getireceğiz. İleri Veri Yapıları: Veri yapıları konusundaki bilgimizi genişleteceğiz ve Python'un sağladığı ileri seviye veri yapılarını ve algoritmaları inceleyeceğiz. Listeler, demetler, kümeler ve sözlüklerle daha etkili çalışmayı öğreneceğiz. İleri Seviye Python z ders Uzmanlık kazanın Gelişmiş Konseptler: İleri seviyede, dekoratörler, jeneratörler ve çoklu iş parçacıklı programlama gibi gelişmiş konseptlere odaklanacağız. Performansı ve etkinliği artıran teknikleri öğreneceğiz. Web Geliştirme ve Veri Analizi: Flask ve Django gibi popüler web çatıları ile çalışacağız ve veri analizi için Pandas ve NumPy gibi kütüphaneleri kullanacağız. Gerçek dünya veri setleri üzerinde çalışarak, analitik becerilerimizi geliştireceğiz. Projeler Projeler Teoriyi pratiğe dökün Gerçek Dünya Projeleri: Öğrendiklerimizi pekiştirmek için gerçek hayattan senaryolar kullanacağız. Katılımcılar, kendi web uygulamalarını ve veri bilimi projelerini baştan sona oluşturacaklar. Portföy Oluşturma: Projelerimizi GitHub üzerinde portföy olarak sergileyeceğiz. Bu, öğrenme sürecimizi somut örneklerle desteklemek ve potansiyel işverenlere becerilerimizi göstermek için mükemmel bir fırsat olacak. ","date":"28 February 2024","permalink":"/posts/python/","section":"Posts","summary":"Temel Seviye Python x ders Python\u0026#39;un temellerini öğrenin Başlangıç ve Temeller: Bu bölümde, Python programlama diline giriş yaparak başlıyoruz.","title":"Python Eğitimi"},{"content":" Technical Skills 🔧 C Python C# Html/CSS JavaScript Kotlin Swift Microservices Data Structures Docker Linux/Bash SQL Server MATLAB DevOps\nExperience 👨‍💻 Freelancer 2022 - Present Data Scientist \u0026amp; Automation Specialist Automation \u0026 Scripting: Developed multiple projects focusing on automating tasks and scripting using the Python programming language. This work allowed me to apply and reinforce my coding skills in practical, client-oriented tasks. Machine Learning: Engaged in various machine learning projects, utilizing predictive models and data analysis to derive actionable insights, enhance decision-making, and drive business outcomes. Data Science: Experienced in data science methodologies, including data exploration, preprocessing, and complex data visualizations to reveal underlying patterns and inform strategic decisions. Client Projects: Collaborated closely with clients to deliver tailored solutions in data analysis, visualization, and machine learning, ensuring client satisfaction and repeat business. Community Engagement: Actively participated in recruitment and external engagement events, contributing to the growth and development of the Fiverr community.. Education 👨‍🎓 School Degree Date Istanbul Gelişim University Computer Engineering 2020 - 2025 Ludwig Maximilian University Of Munich Biochemistry / Biomechanics 2016 - 2020 Professional Certifications ✍️ Certificate Institution Date CS50\u0026rsquo;s Introduction to Computer Science HarvardX CS50\u0026rsquo;s AP Computer Science Principles HarvardX Computer Science for Python Programming HarvardX Introduction to Data Science with Python HarvardX ","date":"28 February 2024","permalink":"/resume/resume/","section":"Resumes","summary":"Technical Skills 🔧 C Python C# Html/CSS JavaScript Kotlin Swift Microservices Data Structures Docker Linux/Bash SQL Server MATLAB DevOps","title":"Resume"},{"content":"","date":"28 February 2024","permalink":"/resume/","section":"Resumes","summary":"","title":"Resumes"},{"content":"","date":"28 February 2024","permalink":"/categories/temel-kavramlar/","section":"Categories","summary":"","title":"Temel Kavramlar"},{"content":"","date":"25 February 2024","permalink":"/tags/example/","section":"Tags","summary":"","title":"Example"},{"content":"an example to get you started\nThis is a heading # This is a subheading # This is a subsubheading # This is a subsubsubheading # This is a paragraph with bold and italic text. Check more at Blowfish documentation undefined\n","date":"25 February 2024","permalink":"/posts/1708842160621-s/","section":"Posts","summary":"an example to get you started","title":"s"},{"content":"","date":"25 February 2024","permalink":"/tags/tag/","section":"Tags","summary":"","title":"Tag"},{"content":"","date":"25 February 2024","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"an example to get you started\nThis is a heading # This is a subheading # This is a subsubheading # This is a subsubsubheading # This is a paragraph with bold and italic text. Check more at Blowfish documentation undefined\n","date":"24 February 2024","permalink":"/posts/1708759923800-new-article/","section":"Posts","summary":"an example to get you started","title":"deneme yazısı"},{"content":"","date":"24 February 2024","permalink":"/categories/d%C3%B6ng%C3%BCler/","section":"Categories","summary":"","title":"Döngüler"},{"content":"","date":"24 February 2024","permalink":"/categories/orta-seviye/","section":"Categories","summary":"","title":"Orta Seviye"},{"content":"an example to get you started\nThis is a heading # This is a subheading # This is a subsubheading # This is a subsubsubheading # This is a paragraph with bold and italic text. Check more at Blowfish documentation\n","date":"24 February 2024","permalink":"/projects/","section":"Projects","summary":"an example to get you started","title":"Projects"},{"content":" Warning! This action is destructive! Python Deep Dive # Temeller # Python Kurulumu ve Çalışma Ortamı # Python Kurulumu # Ide ve Metin Editörleri # Temel Python Söz dizimi - syntax # Python\u0026rsquo;un sözdizimi, diğer programlama dillerine göre daha okunabilir ve basittir.\n→ Yorum # Yorumlar, kodun okunabilirliğini arttırmak, kod içinde açıklamalar yapmak için kullanılır. Kod blokları gibi işleme konulmaz, yok sayılırlar\ngraph LR; A[Lemons]--\u003eB[Lemonade]; B--\u003eC[Profit] 💡 Tek satır yorum : # işareti ile başlar #Örnek python yorum satırı. #Örnek python yorum satırı. #Örnek python yorum satırı. 💡 Çok satırlı yorumlar ise : “”” yada ‘’’ işaretleri ile çevrildir. Bu yapı stringlerde de kullanılır. \u0026#34;\u0026#34;\u0026#34; çok satırlı python yorumu. Bu yapıyı kullanıyoruz çünkü ide de alt satıra geçtiğimizi görmüş olmak yeterli değildir. Alt satıra geçtiğimizi bazı imgelerle belirtmemiz gereklidir. \u0026#34;\u0026#34;\u0026#34; Değişkenler ve veri türleri # Python’da veri türlerini 4 başlıkta açıklayabiliriz.\nint : integer → Tam sayılar.\nfloat : float → Virgüllü / ondalık sayılar.\nstr : string → Metinsel ifadeler.\nbool : boolean → Mantıksal (Doğru/yanlış).\nKullandığımız verinin ne tipte olduğunu bilmek son derece önemlidir. Çünkü yapacağımız işlemler buna bağlıdır. Örneğin “+” operatörünü sayısal veriler ile kullanırsak toplama işlemi gerçekleşir ancak string ifadeleriyle kullandığımızda iki değer ardarda yazılarak birleştirilir.\n→ String Veri tipi : # Programlama dilinde metin parçaları string olarak adlandırılır. Her bir kelime de stringdir tek bir harf de. Stringler karakter dizilerilerdir.\nStringler birkaç farklı şekilde tanımlanabilirler.\n💡 Tek Tırnak kullanarak : \u0026#39;String ifadesi\u0026#39; 💡 Çift tırnak kullanarak : \u0026#34;String ifadesi\u0026#34; 💡 3lü tırnak yapısı \u0026#34;\u0026#34;\u0026#34; string ifadesi \u0026#34;\u0026#34;\u0026#34; \u0026#39;\u0026#39;\u0026#39; string ifadesi \u0026#39;\u0026#39;\u0026#39; İlk iki yöntemde bir değişiklik yokken, 3lü tırnak yapısında satırları kullandığımıza dikkat edin. Bu örnekleri az önce öğrendiğimiz yorum ile karıştırmayın. Bunlar programlamada kullanacağımız string değişkenlerinin içerikleri olacak veriler. Örnek üzerinde görmeden önce print() fonksiyonunu öğrenelim.\n→ Print() Fonksiyonu # Kısaca yazıcı gibi düşünebiliriz. İçerisine girilen değerin çıktısını verir. Ancak dikkat edilmesi gerekilen nokta içeri veri girerken belli başlı kurallara uymamız gerektiğidir.\nprint(\u0026#34;Hello World!\u0026#34;) Programlamada işlem sırası her zaman sağdan sola doğrudur. Çift tırnak arasındaki Hello World! yazısı önce okunur ve tırnak yapısı sayesinde string tipinde olduğu anlaşılır. Ardından print fonksiyonu bize şu şekilde çıktıyı verir ;\nHello World! Peki neden hem “ hemde ‘ kullanımı var ? İkiside aynı işe yarıyorsa ikisinin de olması saçma değil mi ?\nGelin bunu bir örnekle pekiştirelim.\nPrint fonksiyonu ile String birleştirme işlemi “+” operatörü ile gerçekleştirilir yazdırmak istiyorum. Hadi deneyin bakalım.\nGörüldüğü üzere + işareti kayboldu. Peki neden ? Veri tiplerini anlatırken bundan bahsetmiştim aslında. + operatörü stringleri ardarda birleştirmek için kullanılır. Stringler ise tırnak yapısı ile tanımlanır. Yazdığımız kodda mor ile işaretli kısım bir string , yeşil ile işaretli kısım ise başka bir string olarak anlaşıldı. Ve aradaki operatör + olduğu için birleştirildi. Peki bir yolu yok mu bu karmaşıklığı çözmenin ? Farklı tırnak yapıları belki o kadar da kullanışsız değildir ha ?\nBakın ne oldu. Tek tırnak ile başlayan string’imiz tek tırnak ile bitti. Böylece karmaşıklık kalmadı. String içerisinde başka bir string olamayacağı için + nın yakınındaki tırnaklar belirteç olarak tanımlanmadı. Böylece istediğimiz çıktıyı almış olduk.\n💡 Boşluk karakteri de bir stringdir. Çünkü o da yer kaplar ihmal edilemez. “a” ne ise “ “ da odur. 💡 “” boş bir karakter dizisi iken. “ “ içerisinde boşluk barındıran bir karakter dizisidir. Bu farkı unutmayın. → String Manipülasyonu # 💡 \\n operatörü kendisinden sonra gelen ifadelerin alt satıra geçmesini sağlar. 💡 + operatörü metinleri ardarda yazarak birleştirir. String ifadelerinin sonunda yada başında boşluk bırakmadığımızda yazımda oluşan duruma dikkat edin. Kimi zaman kelimeleri boşluklu, kimi zaman bitişik yazdırmamız gerekecek.\nPeki + operatörü olmadan nasıl birleşti bu stringler ? Python’un özelliklerinden biri. Dikkat edin her dilin kendine özgü syntaxleri vardır. Her özellik her dilde olmayabilir. Ancak + işareti kullandığımızda kodlarımız daha okunaklı ve düzenli oluyor.\n💡 * Çarpma operatörü ile stringler birden fazla kez yanyana yazılabilir. → Input() Fonksiyonu # Input fonksiyonu için şu benzetmeyi yapabiliriz. Print fonksiyonu bir yazıcının çıktı işleviyse input ise tarayıcı işlevidir. Kullanıcıdan veri almamızı sağlar.\nProgram önce yeşil kısımdaki input içeriğini bize verdi. Bizde değer olarak bizden istediğii adımızı yazdık. Ardından print fonksiyonunu bizden aldığı veri ile birlikte yazdırdı. Print fonksiyonu ile inputu birbirlerine + operatörü ile bağladık.\nname = input(\u0026#34;Adın ne ?\u0026#34;) Bu örnekte ise name adında bir değişken oluşturduk. Input fonksiyonu önce Adın ne ? yazısını kullanıcıya gösterdi ve alınan değeri name değişkenine atadı.\n→ len() Fonksiyonu # len fonskiyonu içerisine girilen dizinin uzunluğunu hesaplar. Giriş verisi stringdir çıkış verisi ise integerdır.\n1.Satırda sağdan sola doğru ilerleyelim. String değeri tırnak içerisinde olduğu için string değişkeni tanımlandı ve len fonksiyonu ile uzunluğu hesaplandı. Hesaplanan 6 değeri çıktı verildi.\n4.satırdaysa denemedeneme2 birleşimi sağlandı 13 değeri çıktı alındı.\nDeğişkenler aslında her daim kullanılan bir kavramdır. Örneğin input fonksiyonunda girdiğimiz değer geçiçi bir değişkende depolanır. Compiler bu geçici değişkeni bizden gizler, ancak verinin ramde geçici depolanabilmesi için bir değişkene atanmış olması gerekmektedir. Değişkenlerin sözel sayısal vs farklı farklı türleri vardır. Üstte len fonksiyonu için a ve b gibi birkaç değişken kullanmıştık. Değeri değişkene atadığımızda bu değeri sonsuz kez kullanabiliriz. Oysa inputun içine girilen geçici değişken sadece tek kullanımlıktır.\nname isminde bir değişken atayıp bu değişkende input tarafından girilen değeri tutacağız.\nÖnceki bilgilerimizide birleştirirsek\nGörüldüğü üzere tek bir veri ile hem ismi yazdırdık hemde ismin uzunluğunu öğrendik.\nGirilen isim name değişkenine atanır. Len fonksiyonunda girilen name değişkeninin uzunluğu hesaplanır ve length değişkenine atanır. Ardından length değişkeni çıktı alınır.\nDeğişken atamak tıpkı bir telefon defteri gibidir. Bir numara kaydedildiğinde tekrar tekrar her amaçla kullanılabilir.\nAdındanda anlaşılabileceği gibi değişkenler yani variable değiştirilebilir.\n→ Integer Veri tipi # Tam sayılardan oluşan veri tipleridir.\n→ Float Veri tipi # Virgüllü sayılardan oluşan veri tipleridir.\n→ Sayısal Veri tiplerinin Manipülasyonu / Matematiksel Operatörler # input ile kullanıcıdan verileri aldık. A değişkeni : 3 , B değişkeni ise : 5 girdisini aldı. İki variable’ın değerlerini takaslamak istiyoruz bu yüzden swap için kullanacağımız C isimli bir variable oluşturduk. Aktarım tıpkı fonksiyonlardaki gibi sağdan soladır. A değeri C ye atandı. B’nin değerini A’ya atadık. Sırada A’nın orjinal değerini B’ye aktarmak kaldı. A’nın orjinal değerini C’de yedeklemiştik. Onuda B’ye aktardık.\nBunu a bardağındaki kahveyi b bardağındaki çay ile değiştirmek gibi düşünebiliriz. Aktarım için bir swap bardağına ihtiyacımız olacak.\nDeğişken Adlandırma # Değişken adı tek bir kelimeden oluşmaktadır. Yani birden fazla kelime arada boşluk olacak şekilde yanyana gelemez. Örneğin user name gibi. user_name olabilir. user_Name olamaz. Caps’e dikkat.\nSayılar değişken isimlerinin başında yer alamaz. 1number olamaz, number1 olabilir.\nFonksiyon isimleri değişken adları olamaz, karışıklığa yol açar. Örneğin print, input gibi\nTemel Operatörler # ","date":"24 February 2024","permalink":"/posts/python-ilk-ders/","section":"Posts","summary":"Warning!","title":"Python ilk ders"},{"content":" 2024\u0026rsquo;te Üretkenliğinizi Artıracak Visual Studio Kod Eklentileri # 2023 Stack Overflow Geliştirici Anketi\u0026rsquo;ne göre, Visual Studio Code (VSCode olarak da bilinir) en çok tercih edilen tümleşik geliştirici ortamı (IDE) aracı olarak sıralandı.\nVisual Studio Code, kutudan çıktığı gibi birçok harika özelliğe sahip olup, gelişmiş işlevsellik eklemek için geniş bir uzantı topluluğunu destekler.\nVSCode\u0026rsquo;un popülaritesini gösteren Stack Overflow anketi ekran görüntüsü (%73.71 katılımcı tarafından kullanılıyor)\nUzantılar kullanarak VSCode\u0026rsquo;un kullanılabilir özelliklerini ve araçlarını genişletebilirsiniz. Birçok aracı tek bir yerde toplaması, üretkenliği öldüren bağlam değişikliklerini azaltır.\nBetter Comments # Better Comments, kod içindeki yorumları güçlendirmenize yardımcı olur. Kod yorumları, okunabilirlik için faydalıdır ve gelecekte başvuru için açıklamalar veya bağlam sağlar. İyi kod yorumları bırakmak, gelecekte başkalarına ve size zaman kazandırabilir.\nDesteklenen özellikler arasında uyarıları kategorize etme, sorgular yazma, bir TODO listesi oluşturma ve vurguları gösterme bulunmaktadır. Desteklenen diller için kapsamlı bir liste bulunmaktadır.\nYorum satırları, dışarıda bırakılmalarını vurgulayarak ve kaldırılmaları gerektiğini belirterek koyu gri renkte ve metin üstü çizgili olarak biçimlendirilmiştir.\n!https://www.freecodecamp.org/news/content/images/2024/01/better-comments.png\nBetter Comments ile biçimlendirilmiş kod yorumları:\nBookmarks # Bookmarks, kodunuzdaki pozisyonlara yer işareti eklemenizi sağlar. Bu satırlar mavi bir yer işareti simgesi ile belirtilir. Yer işaretleri hızlı referans için düzenlenebilir ve adlandırılabilir.\nTüm yer işaretleri, ayrılmış bir kenar çubuğu bölümünde bulunabilir. Bu, gezinmeyi geliştirmek ve başvuruları aramak için daha az zaman harcamanıza yardımcı olacak harika bir araçtır.\n!https://www.freecodecamp.org/news/content/images/2024/01/printscreen-toggle.png\nBookmarks, satır numarasının yanında yer işareti simgesi ile birlikte mavi renkte görüntülenir.\nCode Spell Checker # Code Spell Checker, adını hakkıyla taşır. Kod tabanınız boyunca yazım hatalarını bulup düzeltmek için temel bir yazım denetleyicisi sağlar. Yanlış yazılmış kelimeler, dalgalı bir çizgi altı ile belirtilir. Birçok dilde kullanılabilir.\nBu benim kişisel favori uzantılarımdan biridir. Bu sayede birçok yazım hatasını tespit edip düzelttim.\n!https://www.freecodecamp.org/news/content/images/2024/01/example.gif\nBu görüntü, Yazım Denetleyicisi\u0026rsquo;nin yazım hatalarını nasıl algıladığını ve düzelttiğini gösterir.\nCodeSnap # CodeSnap, kodun ekran görüntülerini almak için kullanılır. Kod parçacıklarını kolayca paylaşmak için kullanışlı olabilir.\nKodunuzun bir ekran görüntüsünü almak için (Windows ve Linux\u0026rsquo;ta Ctrl+Shift+P, OS X\u0026rsquo;te Cmd+Shift+P) tuşlarına basın ve CodeSnapi arayın. Ardından kodunuzu ekran görüntüsü almak istediğiniz alanı seçin, genişliği ayarlayın ve deklanşör düğmesine tıklayın. Ayrıca kodu seçerek, sağ tıklayıp CodeSnap\u0026rsquo;i seçerek de bir anlık görüntü alabilirsiniz.\nBunu yapabilen web siteleri de bulunsa da, bu tür araçların düzenleyicinizde bulunması, üretkenliği artırmak için daha az bağlam değiştirmeye izin verir.\n!https://www.freecodecamp.org/news/content/images/2024/01/material_operator-mono.png\nCodeSnap ile oluşturulmuş örnek React kod parçacığı.\nCodiumAI # CodiumAI ücretsiz bir yapay zeka destekli kod araç setidir. Kod otomatik tamamlama, sohbet, gelişmiş arama ve öneriler gibi özellikleri destekler.\nYapay zeka, geliştirici verimliliğini artırmada önemli bir oyuncu haline geldi. Test yazma süresinin yarısını harcadığınızı ve böylece diğer önemli, yaratıcı görevlere daha fazla zaman ayırabildiğinizi hayal edin.\nTest söz konusu olduğunda, CodiumAI üstündür. Kodu analiz edebilir ve anlamlı testler ve kapsamlı test paketleri oluşturabilir.\n!https://www.freecodecamp.org/news/content/images/2024/01/Tests-Gif.gif\nCodiumAI, Python kodunun bir bölümüne dayalı bir test paketi oluşturur.\nBu nispeten yeni bir uzantıdır ve hızla popülerlik kazanmaktadır. Desteklenen diller Python, JavaScript, TypeScript, Java, Go ve diğerleridir.\n!https://www.freecodecamp.org/news/content/images/2024/01/g_python_random_gen_with_logo.gif\nCodiumAI\u0026rsquo;nin otomatik tamamlama işlevi, doğal dil istemlerine dayalı işlevler oluşturmak için kullanılır.\nError Lens # Error Lens improves highlighting of errors, warnings, and other language diagnostics. This is a great debugging and error-prevention tool to have.\nErrors will not go unnoticed with this extension. Error and warnings are made prominent by highlighting the entire line, along with the related message printed inline.\nError Lens hataların, uyarıların ve diğer dil tanılamalarının vurgulanmasını geliştirir. Bu, sahip olunması gereken harika bir hata ayıklama ve hata önleme aracıdır.\nBu eklenti ile hatalar fark edilmeyecektir. Hata ve uyarılar, satır içinde yazdırılan ilgili mesajla birlikte tüm satır vurgulanarak belirgin hale getirilir\n!https://www.freecodecamp.org/news/content/images/2024/01/demo.png\nError Lens bir hatayı tanımlayarak eksik noktalı virgül ve sözdizimi hatası olduğunu bildirir.\nBir ek açıklamaya tıklamak sizi doğrudan ilgili kod satırına yönlendirdiğinden, hataları bulmak için daha az zaman harcayın.\nFarklı dillerdeki projelerde çalışan geliştiriciler için değerli kılan birden fazla dil desteği vardır. Ayrıca hataların ve uyarıların görünümünü ve davranışını da yapılandırabilirsiniz.\nGit History # Git History, Git ile sürüm kontrolü için son derece kullanışlı bir uzantıdır (uzantının 10 milyon yüklemesi vardır, bu nedenle popüler olduğu açıktır). Bu uzantı, Git deponuzun ayrıntılı geçmişini doğrudan VSCode arayüzünden keşfetmenizi sağlar. Dosya geçmişini, git günlüğünü görüntüleyebilir ve karşılaştırmalar yapabilirsiniz.\nTaahhüt günlüklerinin, dalların ve zaman içindeki dosya değişikliklerinin etkileşimli ve görsel bir temsilini sağlar. Bu uzantı, sürüm kontrollü projeler üzerinde çalışırken daha erişilebilir ve karmaşık olmayan bir deneyim sağlar.\n!https://www.freecodecamp.org/news/content/images/2024/01/gitLogv3\u0026ndash;1-.gif\nGit Geçmişi burada belirli bir commit üzerinde bir etiket oluşturmak için kullanılmaktadır.\nGitLens # [GitLens] ( https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens), tek bir uzantıda bir araya getirilmiş pek çok özelliği ile en sağlam Git aracıdır. Güçlü bir açık kaynak topluluğuna sahiptir ve sık güncellemelerle aktif desteğe sahip olmaya devam etmektedir.\nGitLens ile, doğrudan VSCode\u0026rsquo;da depolarınız hakkında güçlü bilgiler edinebilirsiniz. Ek açıklamalar, tonlarca Git bilgisini görüntüleyerek editör boyunca entegre edilmiştir.\nGitLens\u0026rsquo;in en kullanışlı özelliklerinden biri suçlama ek açıklamasıdır. Bu, kodu kimin ve ne kadar süre önce yazdığını görmenizi sağlar.\n!https://www.freecodecamp.org/news/content/images/2024/01/current-line-blame.png\nGitLens, kod satırını kullanıcının (Siz) 4 yıl önce oluşturduğu bir commit\u0026rsquo;e kadar izliyor.\nKullanışlı bulduğum bir diğer özellik ise interaktif yeniden düzenleme editörü. Bu, yeniden düzenlemeler gerçekleştirirken güzel bir kullanıcı deneyimi sağlıyor.\n!https://www.freecodecamp.org/news/content/images/2024/01/rebase.gif\nGitLens\u0026rsquo;in etkileşimli rebase örneği. Komiteler seçilebilir, düzenlenebilir, bırakılabilir, ezilebilir ve daha fazlası yapılabilir.\nGitHub Copilot # [GitHub Copilot] ( https://marketplace.visualstudio.com/items?itemName=GitHub.copilot) son iki yılda büyük ilgi gördü. Bu ürün, gelişmiş yapay zeka yeteneklerinden yararlanarak kodlama deneyiminde devrim yarattı. Yalnızca kod parçacıklarının tamamlanmasına yardımcı olmakla kalmıyor, aynı zamanda tüm kod satırları veya blokları için akıllı öneriler sunan bir AI çift programlama yardımcı pilotu görevi görüyor.\nGitHub Copilot\u0026rsquo;un gücü, OpenAI ile entegrasyonunda yatıyor ve bağlamsal olarak alakalı ve pratik öneriler sunmak için geniş bir açık kaynak kod havuzundan yararlanıyor. Bu sadece kodlama hızını artırmakla kalmaz, aynı zamanda sizi çeşitli kodlama modellerine ve en iyi uygulamalara maruz bırakarak değerli bir öğrenme aracı olarak da hizmet eder.\nBu ücretsiz bir araç değildir. Bir abonelik size bireysel olarak ayda 10 dolara mal olabilir veya ekipler için indirimli bir fiyattan satın alınabilir. GitHub Copilot\u0026rsquo;u denemek isterseniz, şu anda 30 günlük bir deneme teklifi var.\n!https://www.freecodecamp.org/news/content/images/2024/01/212964557-8d832278-61bb-4288-a8a7-47f35859e868.gif\nBir fonksiyon üzerinde akıllı otomatik tamamlama kullanan GitHub Copilot.\nAyrıca [buradan daha fazlasını okuyabileceğiniz] ( https://www.freecodecamp.org/news/ai-tools-to-use-in-vs-code/) bazı ücretsiz alternatifler de var (ve aşağıda Tabnine\u0026rsquo;den de bahsediyorum).\nIcon Themes # While VSCode includes default icons, incorporating icon packs provides an excellent means to boost productivity and infuse a visually appealing aesthetic into the editor.\nIcon packs provide a more extensive and visually recognizable set of icons compared to the defaults. This can make it easier for visual distinction between file types and folders. It can build intuitive recognition and reduce the cognitive load when navigating through files.\nThere are plenty of options when it comes to choosing an icon pack. Three popular choices are the Material Theme Icons, vscode-icons, and file-icons.\nI find that a good set of icons improves the overall readability of the file explorer. I enjoy the added benefits of the upgraded visual experience.\n!https://www.freecodecamp.org/news/content/images/2024/01/Group-2.png\nSide-by-side comparison of my editor with the vscode-icons (left) and Material Icon Theme (right) enabled. There are icons for file types and folders that indicate what they contain.\nIndent Rainbow # Indent Rainbow is a colorful extension that you can use to make indentation comprehensible, aiding in maintaining well-organized and properly indented code.\nEach indent is marked with a different color, alternating between 4 different colors. The colorful representation of the structure is not only useful but also visually appealing. This extension is particularly useful for languages that rely heavily on indentation such as YAML or Python.\nIf you aren\u0026rsquo;t fond of the default set of colors, you can configure your own!\n!https://www.freecodecamp.org/news/content/images/2024/01/example\u0026ndash;1-.png\nA side-by-side comparison of two styles from Indent Rainbow. The one on the left shows the lines of the indent in vibrant color and the other shows the entire indention in a muted tone.\nLive Share # Live Share is a collaborative development extension, enabling real-time sharing.\n!https://www.freecodecamp.org/news/content/images/2024/01/Screenshot-2024-01-18-at-12.10.57-PM.png\nThe Live Share header in the extension marketplace. There are 15 million installs.\nThis extension helps you facilitate productive teamwork. Unlike traditional pair programming sessions, Live Share lets you work together while retaining your own editor preferences. Each person has their own cursor, and you can follow each others\u0026rsquo; cursors around the codebase.\nWith Live Share, there is no need to clone repositories or encounter conflicts when working off of a shared branch. Context is immediately gained from the environment when entering a session.\nMultiple Cursor Case Preserve # The Multiple Cursor Case Preserve extension is a productivity-boosting tool that aids in rapid code editing.\nI have personally experienced the frustration when targeting multiple variable names throughout a file for renaming, and inadvertently overriding casing when making a change.\n!https://www.freecodecamp.org/news/content/images/2024/01/Example\u0026ndash;1-.gif\nTargeting multiple variables with the same word but different casing, and updating them all from \u0026rsquo;element\u0026rsquo; to \u0026rsquo;node\u0026rsquo; with the casing remaining in tact.\nTip: Multi-Line Editing in VSCode # Take advantage of these Mac keyboard shortcuts for multi-line editing:\nCmd + D: Quickly select a word and press it again to extend the selection to sequential occurrences. Alt + Shift + Up/Down: Create multiple cursors above or below your cursor. Use Cmd + Right/Left to navigate each cursor to the line end or start, and Cmd + Left/Right to reach the start or end of a word. Alt + Up/Down: Move the current line up or down. Combine with Shift + Up/Down to select and move multiple lines simultaneously, streamlining your code editing process. By preserving the case, it streamlines the editing process by reducing the manual effort required to fix casing.\nPath Intellisense # Path Intellisense is a file path productivity tool. It has intelligent auto-completion that dynamically suggests file paths and directory names as you type. It can minimize errors due to incomplete or wrong file paths.\n!https://www.freecodecamp.org/news/content/images/2024/01/iaHeUiDeTUZuo.gif\nPath Intellisense used to auto-complete a link element\u0026rsquo;s \u0026lsquo;href\u0026rsquo; attribute with a style.css file.\nIt is compatible with a variety of programming languages. But if you are using npm, the npm Intellisense plugin is recommended specifically.\nPeacock # Peacock is a personal favorite of mine, as I love to add more color to my editor. Not only does it outline your editor in color, but it also allows you to configure specific colors for each workspace which is very beneficial when context switching.\nPeacock comes with a range of preselected colors, while also allowing for user-defined custom colors.\n!https://www.freecodecamp.org/news/content/images/2024/01/peacock-windows.png\nA stack of editors from Peacock showing the various default color options. The color is applied to the sidebar and bottom section in the editor window.\nPrettier # Prettier is a widely embraced code formatting tool with over 40 million installations. It provides you with a shared solution to improve code readability.\nThis opinionated code formatter enforces consistent style throughout a codebase. With support for various programming languages, Prettier automatically analyzes and formats code according to a set of standardized rules, this eliminates debates over coding style and enhancing collaboration.\nPrettier\u0026rsquo;s integration with \u0026ldquo;format on save\u0026rdquo; in VSCode vastly increases productivity by automatically applying formatting, preventing any time spent on manual formatting concerns.\nYou\u0026rsquo;ve probably already heard about Prettier, nonetheless it\u0026rsquo;s important to mention as one of the top extensions to have.\nProject Manager # Project Manager is a simple tool to set projects (aka Favorites) and access them. It includes a dedicated side bar section to manage all of your projects in one place.\nThis is great tool when you have a lot of projects to manage and need to frequently switch between them. It comes with a set of handy features like the ability to further organize projects by tags.\n!https://www.freecodecamp.org/news/content/images/2024/01/vscode-project-manager-side-bar-tags.gif\nProject Manager\u0026rsquo;s example of how to create a tag by selecting \u0026lsquo;Edit Tags\u0026rsquo;, choosing from the previously created tags, and where to view them under Favorites.\nTabnine # Tabnine is an free AI coding assistant. It can help to increase your productivity by providing real-time code completions.\nBeyond basic code completion, it takes in the context and offers further relevant suggestions. This can be particularly useful when working in intricate codebases demanding extensive code exploration.\n!https://www.freecodecamp.org/news/content/images/2024/01/completions-main.gif\nTabnine\u0026rsquo;s example of autocompletion. The autocomplete is used to quickly create Python and TypeScript code.\nTabnine supports many programming languages. Adaptive learning is used to adjust to the developer\u0026rsquo;s coding style over time. There is an added focus on privacy, as code is never stored or shared.\nAs I mentioned above, Tabnine is often compared to as a GitHub Copilot alternative, and worth trying out at no cost. Keep an eye out on this one as they add new competitive features.\nSupport for this extension is strong with continual updates. Chat functionality is soon to come, allowing you to ask questions and generate anything from code to documentation.\n!https://www.freecodecamp.org/news/content/images/2024/01/260391624-68c486fc-fa0d-4cfe-b8e1-432684b057d8.gif\nExample from Tabnine of how the new AI chat functionality will look. The user asks for a weather API and Tabnine responds with several examples.\nTODO Highlight # Never forget another to-do with TODO Highlight. It emphasizes TODOs and other annotations with a colorful highlight.\nIt is common to encounter a TODO or FIXME relic of the past in a codebase that has been around for awhile. These can be hard to remember to remove. TODO Highlight is here to help remind you to not leave a trail.\nWether your theme is light or dark, TODO Highlight will put a spotlight on annotations.\n!https://www.freecodecamp.org/news/content/images/2024/01/material-night-eighties.png\nSome JavaScript code with a TODO highlighted in yellow along with a FIXME highlighted in pink.\nTodo Tree # Todo Tree offers a quick and organized solution to uncover annotations. It searches your workspace for TODO and other annotations and organizes them in a file tree.\nIt occupies a specific section in the side activity bar. Clicking on each TODO opens the related file, where the TODO is highlighted for immediate attention.\n!https://www.freecodecamp.org/news/content/images/2024/01/screenshot.png\nThe TODO Tree sidebar section with a selected to-do of \u0026lsquo;TODO Fix this!\u0026rsquo;. In the code to the right, the \u0026lsquo;TODO\u0026rsquo; is highlighted with a bright purple color.\nSummary # VSCode stands out for its expansive extension ecosystem, making it a go-to choice for developers. Having thoroughly tested an array of popular extensions, I\u0026rsquo;ve carefully curated this list of my top recommendations.\nThis list is a great place to start from and build on. I highly encourage you to implement routine trial periods with new extensions. Delve into other extensions through the Visual Studio Code extension search.\nRecognizing the importance of minimizing cognitive load for sustained focus, each extension on this list is chosen with the goal of reducing unnecessary mental burdens like context switching. Make VSCode become your main hub of development needs, and you an improved focus mode along with other benefits.\n!https://www.freecodecamp.org/news/content/images/2024/01/Screenshot-2024-01-23-at-10.33.01-AM-1.png\nI hope these recommendations allow you to optimize your workflow, minimize distractions, and ultimately boost your productivity!\n","date":"14 January 2024","permalink":"/posts/2024-visualstudio-araclari/2024-visualstudio-araclari/","section":"Posts","summary":"2024\u0026rsquo;te Üretkenliğinizi Artıracak Visual Studio Kod Eklentileri # 2023 Stack Overflow Geliştirici Anketi\u0026rsquo;ne göre, Visual Studio Code (VSCode olarak da bilinir) en çok tercih edilen tümleşik geliştirici ortamı (IDE) aracı olarak sıralandı.","title":"2024'te Üretkenliğinizi Artıracak Visual Studio Kod Eklentileri"},{"content":"safas afssaf\ncounter = 0\n","date":"14 January 2024","permalink":"/posts/denemegonderi/","section":"Posts","summary":"safas afssaf","title":"My First Post"},{"content":" Introduction # This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","date":"14 January 2024","permalink":"/posts/my-first-post/","section":"Posts","summary":"Introduction # This is bold text, and this is emphasized text.","title":"My First Post"},{"content":" Python Deep Dive # Temeller # Python Kurulumu ve Çalışma Ortamı # Python Kurulumu # Ide ve Metin Editörleri # Temel Python Söz dizimi - syntax # Python\u0026rsquo;un sözdizimi, diğer programlama dillerine göre daha okunabilir ve basittir.\n→ Yorum # Yorumlar, kodun okunabilirliğini arttırmak, kod içinde açıklamalar yapmak için kullanılır. Kod blokları gibi işleme konulmaz, yok sayılırlar.\n💡 Tek satır yorum : # işareti ile başlar #Örnek python yorum satırı. 💡 Çok satırlı yorumlar ise : “”” yada ‘’’ işaretleri ile çevrildir. Bu yapı stringlerde de kullanılır. \u0026#34;\u0026#34;\u0026#34; çok satırlı python yorumu. Bu yapıyı kullanıyoruz çünkü ide de alt satıra geçtiğimizi görmüş olmak yeterli değildir. Alt satıra geçtiğimizi bazı imgelerle belirtmemiz gereklidir. \u0026#34;\u0026#34;\u0026#34; Değişkenler ve veri türleri # Python’da veri türlerini 4 başlıkta açıklayabiliriz.\nint : integer → Tam sayılar.\nfloat : float → Virgüllü / ondalık sayılar.\nstr : string → Metinsel ifadeler.\nbool : boolean → Mantıksal (Doğru/yanlış).\nKullandığımız verinin ne tipte olduğunu bilmek son derece önemlidir. Çünkü yapacağımız işlemler buna bağlıdır. Örneğin “+” operatörünü sayısal veriler ile kullanırsak toplama işlemi gerçekleşir ancak string ifadeleriyle kullandığımızda iki değer ardarda yazılarak birleştirilir.\n→ String Veri tipi : # Programlama dilinde metin parçaları string olarak adlandırılır. Her bir kelime de stringdir tek bir harf de. Stringler karakter dizilerilerdir.\nStringler birkaç farklı şekilde tanımlanabilirler.\n💡 Tek Tırnak kullanarak : \u0026#39;String ifadesi\u0026#39; 💡 Çift tırnak kullanarak : \u0026#34;String ifadesi\u0026#34; 💡 3lü tırnak yapısı \u0026#34;\u0026#34;\u0026#34; string ifadesi \u0026#34;\u0026#34;\u0026#34; \u0026#39;\u0026#39;\u0026#39; string ifadesi \u0026#39;\u0026#39;\u0026#39; İlk iki yöntemde bir değişiklik yokken, 3lü tırnak yapısında satırları kullandığımıza dikkat edin. Bu örnekleri az önce öğrendiğimiz yorum ile karıştırmayın. Bunlar programlamada kullanacağımız string değişkenlerinin içerikleri olacak veriler. Örnek üzerinde görmeden önce print() fonksiyonunu öğrenelim.\n→ Print() Fonksiyonu # Kısaca yazıcı gibi düşünebiliriz. İçerisine girilen değerin çıktısını verir. Ancak dikkat edilmesi gerekilen nokta içeri veri girerken belli başlı kurallara uymamız gerektiğidir.\nprint(\u0026#34;Hello World!\u0026#34;) Programlamada işlem sırası her zaman sağdan sola doğrudur. Çift tırnak arasındaki Hello World! yazısı önce okunur ve tırnak yapısı sayesinde string tipinde olduğu anlaşılır. Ardından print fonksiyonu bize şu şekilde çıktıyı verir ;\nHello World! Peki neden hem “ hemde ‘ kullanımı var ? İkiside aynı işe yarıyorsa ikisinin de olması saçma değil mi ?\nGelin bunu bir örnekle pekiştirelim.\nPrint fonksiyonu ile String birleştirme işlemi “+” operatörü ile gerçekleştirilir yazdırmak istiyorum. Hadi deneyin bakalım.\nGörüldüğü üzere + işareti kayboldu. Peki neden ? Veri tiplerini anlatırken bundan bahsetmiştim aslında. + operatörü stringleri ardarda birleştirmek için kullanılır. Stringler ise tırnak yapısı ile tanımlanır. Yazdığımız kodda mor ile işaretli kısım bir string , yeşil ile işaretli kısım ise başka bir string olarak anlaşıldı. Ve aradaki operatör + olduğu için birleştirildi. Peki bir yolu yok mu bu karmaşıklığı çözmenin ? Farklı tırnak yapıları belki o kadar da kullanışsız değildir ha ?\nBakın ne oldu. Tek tırnak ile başlayan string’imiz tek tırnak ile bitti. Böylece karmaşıklık kalmadı. String içerisinde başka bir string olamayacağı için + nın yakınındaki tırnaklar belirteç olarak tanımlanmadı. Böylece istediğimiz çıktıyı almış olduk.\n💡 Boşluk karakteri de bir stringdir. Çünkü o da yer kaplar ihmal edilemez. “a” ne ise “ “ da odur. 💡 “” boş bir karakter dizisi iken. “ “ içerisinde boşluk barındıran bir karakter dizisidir. Bu farkı unutmayın. → String Manipülasyonu # 💡 \\n operatörü kendisinden sonra gelen ifadelerin alt satıra geçmesini sağlar. 💡 + operatörü metinleri ardarda yazarak birleştirir. String ifadelerinin sonunda yada başında boşluk bırakmadığımızda yazımda oluşan duruma dikkat edin. Kimi zaman kelimeleri boşluklu, kimi zaman bitişik yazdırmamız gerekecek.\nPeki + operatörü olmadan nasıl birleşti bu stringler ? Python’un özelliklerinden biri. Dikkat edin her dilin kendine özgü syntaxleri vardır. Her özellik her dilde olmayabilir. Ancak + işareti kullandığımızda kodlarımız daha okunaklı ve düzenli oluyor.\n💡 * Çarpma operatörü ile stringler birden fazla kez yanyana yazılabilir. → Input() Fonksiyonu # Input fonksiyonu için şu benzetmeyi yapabiliriz. Print fonksiyonu bir yazıcının çıktı işleviyse input ise tarayıcı işlevidir. Kullanıcıdan veri almamızı sağlar.\nProgram önce yeşil kısımdaki input içeriğini bize verdi. Bizde değer olarak bizden istediğii adımızı yazdık. Ardından print fonksiyonunu bizden aldığı veri ile birlikte yazdırdı. Print fonksiyonu ile inputu birbirlerine + operatörü ile bağladık.\nname = input(\u0026#34;Adın ne ?\u0026#34;) Bu örnekte ise name adında bir değişken oluşturduk. Input fonksiyonu önce Adın ne ? yazısını kullanıcıya gösterdi ve alınan değeri name değişkenine atadı.\n→ len() Fonksiyonu # len fonskiyonu içerisine girilen dizinin uzunluğunu hesaplar. Giriş verisi stringdir çıkış verisi ise integerdır.\n1.Satırda sağdan sola doğru ilerleyelim. String değeri tırnak içerisinde olduğu için string değişkeni tanımlandı ve len fonksiyonu ile uzunluğu hesaplandı. Hesaplanan 6 değeri çıktı verildi.\n4.satırdaysa denemedeneme2 birleşimi sağlandı 13 değeri çıktı alındı.\nDeğişkenler aslında her daim kullanılan bir kavramdır. Örneğin input fonksiyonunda girdiğimiz değer geçiçi bir değişkende depolanır. Compiler bu geçici değişkeni bizden gizler, ancak verinin ramde geçici depolanabilmesi için bir değişkene atanmış olması gerekmektedir. Değişkenlerin sözel sayısal vs farklı farklı türleri vardır. Üstte len fonksiyonu için a ve b gibi birkaç değişken kullanmıştık. Değeri değişkene atadığımızda bu değeri sonsuz kez kullanabiliriz. Oysa inputun içine girilen geçici değişken sadece tek kullanımlıktır.\nname isminde bir değişken atayıp bu değişkende input tarafından girilen değeri tutacağız.\nÖnceki bilgilerimizide birleştirirsek\nGörüldüğü üzere tek bir veri ile hem ismi yazdırdık hemde ismin uzunluğunu öğrendik.\nGirilen isim name değişkenine atanır. Len fonksiyonunda girilen name değişkeninin uzunluğu hesaplanır ve length değişkenine atanır. Ardından length değişkeni çıktı alınır.\nDeğişken atamak tıpkı bir telefon defteri gibidir. Bir numara kaydedildiğinde tekrar tekrar her amaçla kullanılabilir.\nAdındanda anlaşılabileceği gibi değişkenler yani variable değiştirilebilir.\n→ Integer Veri tipi # Tam sayılardan oluşan veri tipleridir.\n→ Float Veri tipi # Virgüllü sayılardan oluşan veri tipleridir.\n→ Sayısal Veri tiplerinin Manipülasyonu / Matematiksel Operatörler # input ile kullanıcıdan verileri aldık. A değişkeni : 3 , B değişkeni ise : 5 girdisini aldı. İki variable’ın değerlerini takaslamak istiyoruz bu yüzden swap için kullanacağımız C isimli bir variable oluşturduk. Aktarım tıpkı fonksiyonlardaki gibi sağdan soladır. A değeri C ye atandı. B’nin değerini A’ya atadık. Sırada A’nın orjinal değerini B’ye aktarmak kaldı. A’nın orjinal değerini C’de yedeklemiştik. Onuda B’ye aktardık.\nBunu a bardağındaki kahveyi b bardağındaki çay ile değiştirmek gibi düşünebiliriz. Aktarım için bir swap bardağına ihtiyacımız olacak.\nDeğişken Adlandırma # Değişken adı tek bir kelimeden oluşmaktadır. Yani birden fazla kelime arada boşluk olacak şekilde yanyana gelemez. Örneğin user name gibi. user_name olabilir. user_Name olamaz. Caps’e dikkat.\nSayılar değişken isimlerinin başında yer alamaz. 1number olamaz, number1 olabilir.\nFonksiyon isimleri değişken adları olamaz, karışıklığa yol açar. Örneğin print, input gibi\nTemel Operatörler # ","date":"1 January 0001","permalink":"/posts/33b35ead-f002-47e5-9f67-e661edcd4600_export-24dc4919-de8e-4f4f-a86a-a84e455bcaf2/python-deep-dive-1fe1219d4de14d25954602f59ffc9228/","section":"Posts","summary":"Python Deep Dive # Temeller # Python Kurulumu ve Çalışma Ortamı # Python Kurulumu # Ide ve Metin Editörleri # Temel Python Söz dizimi - syntax # Python\u0026rsquo;un sözdizimi, diğer programlama dillerine göre daha okunabilir ve basittir.","title":""},{"content":"","date":"1 January 0001","permalink":"/projects/projects/","section":"Projects","summary":"","title":""},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]